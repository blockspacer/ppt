
libmet
------

Lally Singh (lally@vt.edu)
BSD License

PURPOSE
-------
ppt generates a minimal raw-data instrumentation library and reader program for 
capturing and storing measurements.  It works to minimize intrusion
into system performance and is intended to work with very high rates
of data.

The measurements are (abstractly) represented in a table, with each
column being a different measurement, and each row a synchronized
'frame' of values.  For example, a single iteration of a main loop
would be a single frame, containing one table cell per measurement.

Using some macros, a data structure is filled with measurement data
and that structure is written to disk.  

INSTALLATION
------------
The requirements for building ppt aren't trivial.  Sorry.

You'll need:
  ghc - The Glorious Glasgow Haskell Compilation System  6.12+
  llvm - The Low-Level Virtual Machine (tested with version 0.8)
  and a variety of add-on packages for ghc:
   - HStringTemplate
   - llvm (a haskell wrapper API for llvm above) (tested version 0.9.0.1)
   - Crypto
   - MissingH

  I strongly recommend starting with the Haskell Platform 
  (http://hackage.haskell.org/platform/) and then using 
  'cabal install' to get the add-on packages.

  llvm 

CONSTRAINTS
-----------
The primary frame data storage is a global variable, a structure
optimized to minimize the number of cache lines read per measurement
store and frame-save.

HOW TO USE
----------
Create a file (we use the extension .spec) that looks like this:

--
emit C

frame beta1 {
  int count;
}
--

While we're just using 'count' here, any number of elements can be in here, with
the following types: int, float, double, and time.  The first three map to their C
equivalents, the last (currently) maps to a struct timeval (handy for gettimeofday()).
Currently, the 'emit C' is required, but we only support C source generation.  
They will be C++ compatible.

Then call 'ppt generate <thatfile>'.  It will generate (internally, in .ppt/) a
header file, source code, and a llvm bitcode generator program.

